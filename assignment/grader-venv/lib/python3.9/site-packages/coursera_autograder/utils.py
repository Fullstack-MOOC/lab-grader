#!/usr/bin/env python

import argparse
from docker import APIClient as Client
from docker.utils import kwargs_from_env
import requests
import logging
import sys
from sys import platform as _platform

def add_logging_parser(main_parser):
    main_parser.set_defaults(setup_logging=set_logging_level)
    verbosity_group = main_parser.add_mutually_exclusive_group(required=False)
    verbosity_group.add_argument('--verbose', '-v', action='count', help='Increase verbosity.')
    verbosity_group.add_argument('--quiet', '-q', action='count', help='Decrease verbosity.')
    main_parser.add_argument('--silence-urllib3', action='store_true', help='Silence urllib3 warnings.')
    return verbosity_group

def set_logging_level(args):
    root_logger = logging.getLogger()
    level = logging.INFO
    logging.getLogger('requests.packages.urllib3').setLevel(logging.WARNING)
    if getattr(args, 'verbose', None):
        level = logging.DEBUG if args.verbose == 1 else (5 if args.verbose > 1 else level)
    elif getattr(args, 'quiet', None):
        level = logging.WARNING if args.quiet == 1 else logging.ERROR
    root_logger.setLevel(level)
    if getattr(args, 'silence_urllib3', False):
        requests.packages.urllib3.disable_warnings()

def docker_client_arg_parser():
    dp = argparse.ArgumentParser(add_help=False)
    dp.add_argument('--docker-url', help='URL of the Docker daemon.')
    dp.add_argument('--strict-docker-tls', action='store_true',
                   help='Enable strict TLS (macOS only).')
    dp.add_argument('--timeout', type=int, default=60, help='Docker client timeout (sec).')
    return dp

def docker_client(args):
    """
    Returns a low-level Docker APIClient configured for the current platform.
    """
    env_kwargs = kwargs_from_env()
    timeout = args.timeout

    if _platform.startswith('linux') or _platform == 'darwin':
        if _platform == 'darwin' and not args.strict_docker_tls and 'tls' in env_kwargs:
            env_kwargs['tls'].assert_hostname = False
        return Client(base_url=env_kwargs.get('base_url'),
                      version='auto',
                      timeout=timeout,
                      tls=env_kwargs.get('tls'),
                      num_pools=env_kwargs.get('max_pool_size', None),
                      credstore_env=env_kwargs.get('credstore_env', None),
                      # don't use from_env(), use constructor directly
                     )
    elif _platform in ('win32', 'cygwin'):
        logging.fatal("Windows is not supported.")
        sys.exit(2)
    else:
        logging.fatal(f"Unsupported platform: {_platform}")
        sys.exit(2)

def check_int_range(value, lower=None, upper=None):
    try:
        iv = int(value)
    except ValueError:
        raise argparse.ArgumentTypeError(f"{value} is not an integer")
    if lower is not None and iv < lower:
        raise argparse.ArgumentTypeError(f"{iv} is below lower bound {lower}")
    if upper is not None and iv > upper:
        raise argparse.ArgumentTypeError(f"{iv} is above upper bound {upper}")
    return iv